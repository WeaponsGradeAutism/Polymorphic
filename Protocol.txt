Keep track of global peer list with services running and known user-keys
Attach services through HTTP interface
Handle public/private key cryptography
	Signing checksums on behalf of services
	Verifying checksums on behalf of services
	Encrypting private messages with public keys
	Decrypting private messages with private key
Handle proof-of-work requests and demands
Transport messages from peer to peer on behalf of services
Manage connections to other peers
	Keep track of persistent connections
	Keep cap of max connections
	Provide for allocations of persistent connections for services or reject if at cap
	Manage rate caps


Priorities:

1. Performance
2. Performance
3. Performance
4. Portability
5. Security
6. Anonymity
7. Censorship-resistance

Med-prio features:
1. Standardized anonymous broadcasting and routing algorithms (until these are implemented, individual services must handle this on their own)
2. Advanced topology

Low-prio:
1. NAT Traversal
2. Other transport methods (UDP, HTTP, SMTP, ect...)
3. UDP hole punching

POLY protocol
- Message-switched
- Single, persistent connection oriented in a p2p context, can take any form in a p2s context
- Unreliable (built on TCP, but the protocol does not send any form of ACKs for whole messages. That must be implemented by a service)
- Has built-in anonymity features. These are optional because varying p2p applications may not require anonymity, may not be compatible with the available anonymity algorithms and thus need to implement their own algorithm, or may not be able to implement anonymity.
- Has built-in encryption features. These are optional in the same capacity.

NAT Traversal
- Test for presence of NAT using not NAT'd peers
- UPnP port opening
- Use known not NAT'd peers to perform TCP hole punching

Standardized broadcasting and routing algorithms:
- Each service can activate Poly's broadcasting interface.
- The interface will keep a list of very local, low latency peers. These connections will be responsible for propogating any messages through the local neighborhood.
- It will also keep a stack of "seeding" peers randomly selected from the entire pool used to seed traffic to farther parts of the network.
- Any broadcast traffic received will be passed on primarily to the neighborhood peers, but it will also be seeded randomly to other peers.
- The origin point will seed traffic to the randomly selected seed pool. It will not broadcast using the neighborhood list.




Peer variables retrievable by PEER-SETTINGS
- MAX_MULTICAST


on conflict rollback?
what buffer size?

1400 byte buffer default

BEGIN (s==>p p==>p p==>s p==>c)
Opening connection.

Greets with message "POLY v" with any number of arbitrary bytes afterward. Terminates with \n. Follows format "PROTOCOL_VERSION, CLIENT_NAME, ARBITRARY BYTES"

2-byte encryption request (0 for no encryption, anything else begins the connection with an encryption negotiation)
(if enc)
//unimplemented
(end if enc)
2-byte realm (0 for peer, 1 for service, 2 for client)
(if peer)
-RETURNS- 
2-byte result code (0 if pass, anything else if fail)
---------
(end if peer)
(if service)
2-byte service string size (max 256 characters)
X-byte service string
-RETURNS-
2-byte result code (0 if pass, anything else if fail)
---------
(end if service)
(if client)
-RETURNS-
2-byte result code (0 if pass, anything else if fail)
---------
(end client)

0000: CONNECT (s==>p)
Upon connection success, a NEW_CONNECTION event will be sent to all listening services.

(s==>p)
0: 2-byte command code
2: 4-byte IPv4 address
6: 2-byte protocol 
8: 2-byte Layer-4 port
10: END



0000: CONNECT_ERROR  (p==>s)
0: 2-byte command code
2: 4-byte IPv4 address
6: 2-byte Layer-4 port
8: 2-byte protocol 
10: 2-byte error code
12: END



0001: CONNECTv6 (s==>p)
Like connect, but with IPv6 and NEW_CONNECTIONV6.

(all)
128-bit IPv6 address
16-bit Layer-4 port
-RETURNS-
16-bit result code







0004: SUBSCRIBE-CONNECTION (s==>p)
Used by services to subscribe to new connection notifications. Can filter IP by REGEX.

(all)
32-bit REGEX string length
XX-bit string length



0005: NEW_CONNECTION (p==>s)
Notifies services of new connections. Can filter by SUBSCRIBE-CONNECTION, SUBSCRIBE-SERVICE, and SUBSCRIBE-USER.

(all)
32-bit IPv4 address
16-bit Layer-4 port
16-bit connected peer id



0006: NEW_CONNECTIONv6 (p==>s)
Like NEW-CONNECTION, but for IPv6 clients.

(all)
128-bit IPv6 address
16-bit Layer-4 port
16-bit connected peer id



DISONNECT (s==>p p==>p p==>s)
Used to notify remote peer, local peer, or service that disconnection is taking place.

(s==>p)
0: 2-byte peer id
2: END

(all)
16-bit disconnect code



0005: PEER_DISCONNECTED (p==>s)
Notifies services of peers disconnecting.

0: 2-byte command code
2: 2-byte peer id
4: END



0007: PING (p==>s p==>p)

(p==>s)
32-bit connected peer id

(p==>p)
command only



0008: MESSAGE (s==>p p==>p p==>s)
The basic building block of POLY. Sends messages from services from peer to peer. 0 is local peer.

0: 2-byte source/destination peer id
2: 2-byte source service id
4: 2-byte destination service id
6: 2-byte message length
8: X-byte message
8 - 65,544: END



MESSAGE_SERVICE_TO_SERVICE (s==>s)
Allows services to send messages to each other.

0: 2-byte source service id
2: 2-byte destination service id
4: 2-byte message length
6: X-byte message
6 - 65,542: END



MESSAGE_SERVICE_TO_CLIENT (s==>c c==>s)
Allows clients to send messages to services and vice versa.

0: 2-byte source service/client id
2: 2-byte destination service/client id
4: 2-byte message length
6: X-byte message
6 - 65,542: END



0009: ERROR (p==>p p==>s)

0: 2-byte error code
2: END


000E: PEER-LIST (s==>p p==>p)
Requests the biggest peer-list the other peer is willing to offer. Services can request this from specific peers. Peers can respond to this request with any number of PEER-INFO commands. Used for bootstrapping. 

(s==>p)
32-bit connected peer id

(p==>p)
command only



000F: PEER-INFO (p==>p p==>s)
Sends peer information

(all)
32-bit IPv4 address
16-bit Layer-4 port
32-bit Service string length
XX-bit Service string
16-bit User count
XX-bit Array of 256-bit public user keys



0010: BROADCAST-PEER (p==>p)

(all)
32-bit IPv4 address
16-bit Layer-4 port
32-bit Service string length
XX-bit Service string
16-bit User count
XX-bit Array of 256-bit public user keys



0011: NEW-PEER (p==>s)
Used to update subscribed services when a new peer is found. Can be filtered by SUBSCRIBE-SERVICE and SUBSCRIBE-USER.



0012: FIND-SERVICE (s==>p p==>p)
Peers will respond to this with any number of peer-info commands.

(s==>p)
32-bit connected peer ids
32-bit regex string size
XX-bit regex search string

(p==>p)
32-bit regex string size
XX-bit regex search string



0013: UPDATE-SERVICES (s==>p p==>p)
Sends updated services string to a peer.

(all)
32-bit IPv4 address
16-bit Layer-4 port
32-bit service string size
XX-bit service search string



GET_SERVICES (s==>p)
Gets the local cache of storage string from a particular client. Retuns 0 length string if none is present.



0014: REQUEST-SERVICES (s==>p p==>p)
Request an update for the service string on a specific user



0015: DEREGISTER-SERVICE (s==>p)
Allows a service to deregister itself from the service string of its peer



0016: REPLACE-SERVICE (s==>p)
Allows a service to update is service string



0017: SUBSCRIBE-SERVICE (s==>p)
Used by services to subscribe to service updates. Can be filtered by REGEX string.



0018: NEW-SERVICE (p==>s)
Used to update subscribed services of service string updates. Can be filtered by a REGEX string.



IDENTIFY_SERVICE (p==>s)
Allows a service to get its own service ID.



0019: FIND-USER (s==>p p==>p)
Asks a peer if it knows the location of a publicly broadcasted user

(s==>p)
32-bit connected peer id
256-bit public key



001A: BROADCAST-USER (s==>p p==>p)
Broadcast the local user, making its origin known to the network. This will only happen if the user key was created as public, or the user themself has modified it to allow public broadcasting.

(p==>p)



001B: REQUEST-USERS (s==>p p==>p)
Request a list of publicly broadcasted users from a specific peer



001C: CREATE-USER (s==>p)
Service instructs peer to create a new user on its behalf

(all)



001D: SUBSCRIBE-USER (s==>p)
Used by services to subscribe to user updates. Can be filtered by REGEX string.



001E: NEW-USER (p==>s)
Used to update subscribed services of user updates. Can be filtered by a REGEX string.



REVOKE-USER



001F: SERVICE-OFFLINE (p==>p p==>s)
Sent when the requested service is ran by this peer, but is not currently connected.



0020: SERVICE-NOT-FOUND (p==>p p==>s)
Sent when the service requested is not present on the peer.



SIGN_DATA



AUTHENTICATE_DATA



ENCRYPT_DATA



DECRYPT_DATA



POW_PRODUCE







Why not GNUnet, Freenet, ZeroNet or IPFS?

GNUnet, Freenet, ZeroNet, and IPFS have a few flaws, in my opinion. Firstly, they are all far too concerned with one application: file sharing. POLY intends to be an open framework for more flexible, dynamic p2p applications. ZeroNet relies on static BitTorrent content hosting. 

Next, the GNUnet and Freenet systems are too focused on anonymity and censorship-resistance. Make no mistake: these two things are quite important, but these protocols put these concerns front and center, and above all else. For what they seek to achieve, this may be pragmatic. However, POLY is more concerned with building a performant, flexible platform. Standardized anonymization and encryption tools will be available for services to take advantage of, but advanced strategies will require the service itself to implement. The goal of POLY is to make a p2p platform that can compete with the server/client model in terms of performance, scalability, and flexibility. Anonymity and censorship-resistance are secondary concerns.

POLY seeks to enable developers to create services that do not rely on centralization, and thus do not have vulnerabilities to DDoS attacks, and whose dataset is not in the hands of a single individual or institution.

That being said, the public user system allows services to use any measure of centralization if they so desire.

Additionally, POLY is written in C and uses only carefully selected highly portable libraries, so the POLY daemon is easily ported to other platforms.












DWORD WINAPI workConnections(LPVOID dummy)
{

	while (!isShutdown) {
		EnterCriticalSection(&queueCritSection);
		workersAvailable++;
		while (!queuedJob)
		{
			SleepConditionVariableCS(&queueWorkAvailable, &queueCritSection, INFINITE);
		}
		workersAvailable--;
		CONNECTION_INFO *currentJob = workQueue;
		queuedJob = 0;
		LeaveCriticalSection(&queueCritSection);

		handleTerminal(currentJob);
		closeConnection(currentJob);
		// determine source
		// process relevant data
		// sent requests ect
		// wait for work

		EnterCriticalSection(&queueCritSection);
		if (workersAvailable == 1)
		{
			LeaveCriticalSection(&queueCritSection);
			WakeConditionVariable(&queueWorkerAvailable);
		}
		else 
		{
			LeaveCriticalSection(&queueCritSection);
		}
	}

	ExitThread(0);
}


int enqueueJob(CONNECTION_INFO *job)
{
	EnterCriticalSection(&queueCritSection);
	while (workersAvailable == 0)
	{
		SleepConditionVariableCS(&queueWorkerAvailable, &queueCritSection, INFINITE);
	}
	workQueue = job;
	queuedJob = 1;
	LeaveCriticalSection(&queueCritSection);
	WakeConditionVariable(&queueWorkAvailable);
	return 0;
}


int handleTerminal(CONNECTION *connection)
{

	int iSendResult;

	printf("Bytes received: %d\n", connection->byteCount);

	// Echo the buffer back to the sender
	if (connection->byteCount > 2) {
		iSendResult = send(connection->socket, connection->buffer.buf, connection->byteCount, 0);
		if (iSendResult == SOCKET_ERROR) {
			printf("send failed with error: %d\n", WSAGetLastError());
			closesocket(connection->socket);
			WSACleanup();
		}
		printf("Bytes sent: %d\n", iSendResult);
	}
	else if (connection->byteCount < 3)
	{
		printf("Connection closing...\n");
		printf("CONNECTIONS: %i\n", --numConnections);
		closeConnection(connection);
		return 0;
	}
	else {
		printf("recv failed with error: %d\n", WSAGetLastError());
		WSACleanup();
	}

	return 1;

}



- Messages do need to be tagged with an ID and recieving party does need to send an ack of that ID.
- The only flow limit the client will enforce is universal in-flow and out-flow limits.
- A delay in an ability to send a message command will delay the processing of all further commands, even ones that don't involve transmission to another peer.
- A service can choose to be informed whenever a message has been successfully sent.
- If there is no active flow cooldown, any packet that the client receives will be sent immediately. The flow cooldown begins, and any further packets received by the client will be placed into the respective service's sending buffer, and no further commands will be processed until the queue is emptied.
- Sending buffers will be enqueued in a FIFO queue that will be sent and emptied at a rate determined by the throttle.